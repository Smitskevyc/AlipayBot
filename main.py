from aiogram import Bot, Dispatcher, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
from aiogram.fsm.state import State, StatesGroup
from aiogram import F
from aiogram.types.input_file import FSInputFile
from datetime import datetime, timedelta



import sqlite3
import asyncio
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
cancel_button = KeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ ‚ùå")
# –í–∞—à Telegram —Ç–æ–∫–µ–Ω –∏ ID –∫–∞–Ω–∞–ª–æ–≤
TOKEN = "7650910241:AAGWjzv020ohKhiE2pIaPRLiu1Pw6_ydS2k"
LOG_ID = "-1002420300805"  # –õ–æ–≥-–∫–∞–Ω–∞–ª –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
RG_ID = "-1002359652943"  # –ö–∞–Ω–∞–ª –¥–ª—è –¥—Ä—É–≥–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
RB_ID = "-1002468155515"  # –ö–∞–Ω–∞–ª –¥–ª—è –ë–µ–ª–∞—Ä—É—Å–∏
UA_ID = "-1002487887581"  # –ö–∞–Ω–∞–ª –¥–ª—è –£–∫—Ä–∞–∏–Ω—ã
PAY_ID = "-1002425628898" # –ö–∞–Ω–∞–ª –≤—ã–ø–ª–∞—Ç

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())


# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class RegisterAccount(StatesGroup):
    region = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞
    email = State()
    email_password = State()
    alipay_password = State()
    payment_pin = State()
    documents = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY,
        telegram_id INTEGER,
        username TEXT,
        region TEXT, 
        email TEXT,
        email_password TEXT,
        alipay_password TEXT,
        payment_pin TEXT,
        documents TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )''')
    conn.commit()
    conn.close()


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É
def save_user_data(data):
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute('''INSERT INTO users (telegram_id, username, region, email, email_password, alipay_password, payment_pin, documents)
                      VALUES (?, ?, ?, ?, ?, ?, ?, ?)''', (
        data["telegram_id"], data["username"], data["region"], data["email"],
        data["email_password"], data["alipay_password"], data["payment_pin"],
        data["documents"]
    ))
    conn.commit()
    conn.close()


def generate_stats():
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()

    today = datetime.now().date()
    start_of_week = today - timedelta(days=today.weekday())
    start_of_month = today.replace(day=1)

    # –ó–∞–ø—Ä–æ—Å—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats = {
        "total": cursor.execute("SELECT COUNT(*) FROM users").fetchone()[0],
        "today": cursor.execute(
            "SELECT region, COUNT(*) FROM users WHERE DATE(created_at) = ? GROUP BY region", (today,)
        ).fetchall(),
        "week": cursor.execute(
            "SELECT region, COUNT(*) FROM users WHERE DATE(created_at) BETWEEN ? AND ? GROUP BY region",
            (start_of_week, today)
        ).fetchall(),
        "month": cursor.execute(
            "SELECT region, COUNT(*) FROM users WHERE DATE(created_at) BETWEEN ? AND ? GROUP BY region",
            (start_of_month, today)
        ).fetchall(),
    }
    conn.close()

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
    stats_text += f"–í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total']}\n\n"

    stats_text += f"–ó–∞ —Å–µ–≥–æ–¥–Ω—è ({today.strftime('%d.%m.%Y')}):\n"
    total_today = 0
    for region, count in stats["today"]:
        stats_text += f"-üåç {region}: {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        total_today += count
    stats_text += f"- –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {total_today}\n\n"

    stats_text += f"–ó–∞ –Ω–µ–¥–µ–ª—é ({start_of_week.strftime('%d.%m.%Y')} - {today.strftime('%d.%m.%Y')}):\n"
    total_week = 0
    for region, count in stats["week"]:
        stats_text += f"-üåç {region}: {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        total_week += count
    stats_text += f"- –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞ –Ω–µ–¥–µ–ª—é: {total_week}\n\n"

    stats_text += f"–ó–∞ –º–µ—Å—è—Ü ({start_of_month.strftime('%d.%m.%Y')} - {today.strftime('%d.%m.%Y')}):\n"
    total_month = 0
    for region, count in stats["month"]:
        stats_text += f"-üåç {region}: {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        total_month += count
    stats_text += f"- –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞ –º–µ—Å—è—Ü: {total_month}"

    return stats_text


# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞
async def send_instructions(message: types.Message):
    instructions = """
–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:

1. –†–µ–≥–∏–æ–Ω (–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)

2. –ü–æ—á—Ç–∞ (–ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ Gmail)

3. –ü–∞—Ä–æ–ª—å –æ—Ç –ø–æ—á—Ç—ã

4. –ü–∞—Ä–æ–ª—å –æ—Ç Alipay

5. –ü–ª–∞—Ç–µ–∂–Ω—ã–π PIN (–ï—Å–ª–∏ —Å—Ç–∞–≤–∏–ª–∏)

6. –¢—Ä–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (–ü—Ä–∏–º–µ—Ä —Å–Ω–∏–∑—É)
    """
    await message.answer(instructions)

    # –ê–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏ –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º
    photo_paths = [
        "/home/ubuntu/AlipayBot/photo1.png",
        "/home/ubuntu/AlipayBot/photo2.png",
        "/home/ubuntu/AlipayBot/photo3.png"
    ]

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —á–µ—Ä–µ–∑ FSInputFile
    for photo_path in photo_paths:
        input_file = FSInputFile(photo_path)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º FSInputFile –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        await bot.send_photo(chat_id=message.chat.id, photo=input_file)

    # –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")]],
        resize_keyboard=True
    )
    await message.answer("–ù–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫—É!", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_command(message: types.Message):
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    await send_instructions(message)

# ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
AUTHORIZED_USERS = [5185559474, 5371530911]  # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ ID

@dp.message(Command("stats"))
async def stats_command(message: types.Message):
    if message.from_user.id not in AUTHORIZED_USERS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    stats_text = generate_stats()
    await message.answer(stats_text)


# –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∑–∞–∫–æ–Ω—á–µ–Ω–æ
@dp.message(F.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
async def start_registration(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is not None:
        await message.answer("–í—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return

    if not message.from_user.username:
        await message.answer("–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç username –≤ Telegram. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
        return

    await state.update_data(username=message.from_user.username)
    
    # –ó–∞–ø—Ä–æ—Å —Ä–µ–≥–∏–æ–Ω–∞
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ë–µ–ª–∞—Ä—É—Å—å")],
            [KeyboardButton(text="–£–∫—Ä–∞–∏–Ω–∞")],
            [KeyboardButton(text="–î—Ä—É–≥–æ–π —Ä–µ–≥–∏–æ–Ω")],
            [cancel_button]
        ],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ä–µ–≥–∏–æ–Ω:", reply_markup=keyboard)
    await state.set_state(RegisterAccount.region)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞
@dp.message(RegisterAccount.region)
async def process_region(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ ‚ùå":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
        await cancel_registration(message, state)
        return

    region = message.text
    if region not in ["–ë–µ–ª–∞—Ä—É—Å—å", "–£–∫—Ä–∞–∏–Ω–∞", "–î—Ä—É–≥–æ–π —Ä–µ–≥–∏–æ–Ω"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤: –ë–µ–ª–∞—Ä—É—Å—å, –£–∫—Ä–∞–∏–Ω–∞ –∏–ª–∏ –î—Ä—É–≥–æ–π —Ä–µ–≥–∏–æ–Ω.")
        return

    await state.update_data(region=region)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É Gmail:")
    await state.set_state(RegisterAccount.email)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ—á—Ç—ã
@dp.message(RegisterAccount.email)
async def process_email(message: types.Message, state: FSMContext):
    await state.update_data(email=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –ø–æ—á—Ç—ã:")
    await state.set_state(RegisterAccount.email_password)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –æ—Ç –ø–æ—á—Ç—ã
@dp.message(RegisterAccount.email_password)
async def process_email_password(message: types.Message, state: FSMContext):
    await state.update_data(email_password=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç AliPay:")
    await state.set_state(RegisterAccount.alipay_password)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –æ—Ç AliPay
@dp.message(RegisterAccount.alipay_password)
async def process_alipay_password(message: types.Message, state: FSMContext):
    await state.update_data(alipay_password=message.text)
    await message.answer("–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –ø–ª–∞—Ç–µ–∂–Ω—ã–π PIN? –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:")

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ï–°–¢–¨")],
            [KeyboardButton(text="–ù–ï–¢–£")],
            [cancel_button]
        ],
        resize_keyboard=True
    )
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ:", reply_markup=keyboard)
    await state.set_state(RegisterAccount.payment_pin)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
@dp.message(F.text == "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ ‚ùå")
async def cancel_registration(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞. –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞, –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç'.",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")]],
            resize_keyboard=True
        )
    )

@dp.message(RegisterAccount.documents, F.content_type == "photo")
async def process_documents(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    documents = user_data.get("documents", [])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ
    if len(documents) >= 5:
        await message.answer("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ - 5. –£–¥–∞–ª–∏—Ç–µ –ª–∏—à–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ñ–æ—Ç–æ
    documents.append(message.photo[-1].file_id)
    await state.update_data(documents=documents)

    await message.answer(
        f"–§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ ({len(documents)}/5). –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –µ—â—ë –¥–æ–∫—É–º–µ–Ω—Ç—ã, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Ö. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–ø–∏—à–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'."
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞, –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç PIN
@dp.message(RegisterAccount.payment_pin, F.text == "–ù–ï–¢–£")
async def process_no_payment_pin(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º, —á—Ç–æ PIN –Ω–µ—Ç
    await state.update_data(payment_pin="–ù–ï–¢–£")
    # –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–ø–∏—à–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.",
        reply_markup=types.ReplyKeyboardRemove()  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –¥–ª—è –≤–≤–æ–¥–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    await state.set_state(RegisterAccount.documents)


@dp.message(RegisterAccount.payment_pin, F.text == "–ï–°–¢–¨")
async def process_has_payment_pin(message: types.Message, state: FSMContext):
    # –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ PIN
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–ª–∞—Ç–µ–∂–Ω—ã–π PIN:",
        reply_markup=types.ReplyKeyboardRemove()  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ç–æ –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ PIN
    await state.set_state(RegisterAccount.payment_pin)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ PIN, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω "–ï–°–¢–¨"
@dp.message(RegisterAccount.payment_pin)
async def process_enter_payment_pin(message: types.Message, state: FSMContext):
    await state.update_data(payment_pin=message.text)
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–ø–∏—à–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.",
        reply_markup=types.ReplyKeyboardRemove()  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )
    await state.set_state(RegisterAccount.documents)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞ –ª—é–±–æ–º —ç—Ç–∞–ø–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@dp.message(Command("cancel"))
async def cancel_command(message: types.Message, state: FSMContext):
    await state.clear()  # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await message.answer(
        "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞. –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞, –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç'.",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")]],
            resize_keyboard=True
        )
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (–º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ)
@dp.message(RegisterAccount.documents, F.content_type == "photo")
async def process_documents(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    documents = user_data.get("documents", [])
    documents.append(message.photo[-1].file_id)
    await state.update_data(documents=documents)
    await message.answer("–§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –µ—â—ë –¥–æ–∫—É–º–µ–Ω—Ç—ã, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Ö. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–ø–∏—à–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.")

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
@dp.message(RegisterAccount.documents, F.text.casefold() == "–≥–æ—Ç–æ–≤–æ")
async def finish_registration(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    documents = user_data.get("documents", [])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    if len(documents) < 3:
        await message.answer(
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è —Å–¥–∞—á–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ - 3. –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏."
        )
        return
    
    save_user_data({
        "telegram_id": message.from_user.id,
        "username": user_data["username"],
        "region": user_data["region"],
        "email": user_data["email"],
        "email_password": user_data["email_password"],
        "alipay_password": user_data["alipay_password"],
        "payment_pin": user_data["payment_pin"],
        "documents": ", ".join(user_data["documents"]),
    })

    await bot.send_message(PAY_ID, f"""
üÜî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user_data["username"]}
üì¶ –†–µ–≥–∏–æ–Ω: {user_data['region']}
üìß –ü–æ—á—Ç–∞: {user_data['email']}
    """)

    form_text = f"""
üë§ –ù–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç:
üÜî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user_data["username"]}
üì¶ –†–µ–≥–∏–æ–Ω: {user_data['region']}
üìß –ü–æ—á—Ç–∞: {user_data['email']}
üîë –ü–∞—Ä–æ–ª—å –ø–æ—á—Ç—ã: {user_data['email_password']}
üí≥ –ü–∞—Ä–æ–ª—å AliPay: {user_data['alipay_password']}
üè¶ –ü–ª–∞—Ç–µ–∂–Ω—ã–π PIN: {user_data['payment_pin'] if user_data['payment_pin'] != '–ù–ï–¢–£' else '–ù–µ—Ç'}
"""

    media_group = [
    types.InputMediaPhoto(media=photo_id) for photo_id in user_data["documents"]
    ]

    media_group[0].caption = form_text

    await bot.send_media_group(chat_id=LOG_ID, media=media_group)

    form_text = f"""
{user_data['email']}
{user_data['email_password']}
{user_data['alipay_password']}
{user_data['payment_pin'] if user_data['payment_pin'] != '–ù–ï–¢–£' else ''}
"""

    media_group[0].caption = form_text

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª
    target_channel = None
    if user_data['region'] == "–£–∫—Ä–∞–∏–Ω–∞":
        target_channel = UA_ID
    elif user_data['region'] == "–ë–µ–ª–∞—Ä—É—Å—å":
        target_channel = RB_ID
    else:
        target_channel = RG_ID

    await bot.send_media_group(chat_id=target_channel, media=media_group)

    await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()

# –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
async def main():
    init_db()
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    asyncio.run(main())
